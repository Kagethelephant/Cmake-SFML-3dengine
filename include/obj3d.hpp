#pragma once

//////////////////////////////////////////////////////////////////
// Headers
//////////////////////////////////////////////////////////////////
#include <SFML/Graphics.hpp>
#include "data.hpp"
#include "math.hpp"



//////////////////////////////////////////////////////////////////
/// Simple 3D object
//////////////////////////////////////////////////////////////////
class object3d
{
public:

    object3d();

    //////////////////////////////////////////////////////////////////
    /// Vertex for rendering
    //////////////////////////////////////////////////////////////////
    struct vec3d{float x,y,z;};

    //////////////////////////////////////////////////////////////////
    /// Triangles for constructing 3D mesh
    //////////////////////////////////////////////////////////////////
    struct triangle{vec3d v[3];};

    //////////////////////////////////////////////////////////////////
    /// Container for transformation matrices
    //////////////////////////////////////////////////////////////////
    struct mat4x4 {float m[4][4] = {0.0f};};




    //////////////////////////////////////////////////////////////////
    /// Holds triangles for 3D mesh
    //////////////////////////////////////////////////////////////////
    std::vector<triangle> mesh;
    std::vector<vec3d> vecCloud;




    //////////////////////////////////////////////////////////////////
    /// Rotate the model
    //////////////////////////////////////////////////////////////////
    void rotate(float u = 0.0f, float v = 0.0f, float w = 0.0f);

    //////////////////////////////////////////////////////////////////
    /// Project Point
    //////////////////////////////////////////////////////////////////
    vec3d projectPoint(vec3d vecIn, float zoom = 3.0f);

    //////////////////////////////////////////////////////////////////
    /// Project Point
    //////////////////////////////////////////////////////////////////
    vec3d rotatePoint(vec3d vecIn);

    //////////////////////////////////////////////////////////////////
    /// Rotate the model
    //////////////////////////////////////////////////////////////////
    triangle projectTriangle(triangle tri, float zoom = 3.0f);



    //////////////////////////////////////////////////////////////////
    /// Rotate the model
    //////////////////////////////////////////////////////////////////
    float dotProd(vec3d vec1, vec3d vec2);

    //////////////////////////////////////////////////////////////////
    /// Normalize vector
    //////////////////////////////////////////////////////////////////
    vec3d normalize(vec3d vecIn);





    //////////////////////////////////////////////////////////////////
    /// Called externally to draw the triangles in the mesh 
    /// (provide texture to draw to)
    //////////////////////////////////////////////////////////////////
    void drawMesh(sf:: RenderTexture& texture, float u = 0.0f, float v = 0.0f, float w = 0.0f, float zoom = 3.0f);

    //////////////////////////////////////////////////////////////////
    /// Called externally to draw the points in a cloud
    /// (provide texture to draw to)
    //////////////////////////////////////////////////////////////////
    void drawVecCloud(sf:: RenderTexture& texture, float u = 0.0f, float v = 0.0f, float w = 0.0f, float zoom = 3.0f);



private:

    //////////////////////////////////////////////////////////////////
    /// Persistent variables
    //////////////////////////////////////////////////////////////////

    mat4x4 m_matProj;
    mat4x4 m_matRotU;
    mat4x4 m_matRotV;
    mat4x4 m_matRotW;

    float m_aspectRatio;

    //////////////////////////////////////////////////////////////////
    /// Private function for performing matrice transformations on vertices
    //////////////////////////////////////////////////////////////////
    vec3d matMultiply(vec3d vecIn, mat4x4 mat);


    //////////////////////////////////////////////////////////////////
    /// Privat function called by the drawSelf function 
    /// to draw the individual triangles
    //////////////////////////////////////////////////////////////////
    void drawTriangle(sf::RenderTexture& texture, triangle tri, sf::Color col = c_color(Blue));

};