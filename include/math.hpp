#pragma once

//////////////////////////////////////////////////////////////////
// Headers
//////////////////////////////////////////////////////////////////
#include <random>
#include <string>



//////////////////////////////////////////////////////////////////
/// \brief 3d vector with an optional constructor
//////////////////////////////////////////////////////////////////
struct vector2
{
    float x,y;
    vector2(float _x = 0.0f, float _y = 0.0f){x = _x; y = _y;};
};

//////////////////////////////////////////////////////////////////
/// \brief 3d vector with an optional constructor
//////////////////////////////////////////////////////////////////
struct vector3
{
    float x,y,z;
    vector3(float _x = 0.0f, float _y = 0.0f, float _z = 0.0f){x = _x; y = _y; z = _z;};
};

//////////////////////////////////////////////////////////////////
/// \brief Simple 4x4 matrix, good for 3D rendering
//////////////////////////////////////////////////////////////////
struct mat4x4 {float m[4][4] = {0.0f};};



//////////////////////////////////////////////////////////////////
/// \brief cross product or normal vector of 2 vectors, returns a vector3
//////////////////////////////////////////////////////////////////
vector3 crossProd(vector3 v1, vector3 v2);

//////////////////////////////////////////////////////////////////
/// \brief Dot product or "likeness" of 2 vectors, optional 3rd 
/// vector for a position of a camera in which case v2 will be
/// the position where the camera is pointing
/// \return Float scalar representing the likeness of the vectors
//////////////////////////////////////////////////////////////////
float dotProd(vector3 v1, vector3 v2, vector3 v3 = vector3(0,0,0));

//////////////////////////////////////////////////////////////////
/// \brief Normalizes a vector; makes it so the length of the vector is one
//////////////////////////////////////////////////////////////////
vector3 normalize(vector3 vin);



//////////////////////////////////////////////////////////////////
/// \brief Gets a random integer between the 2 given integers
//////////////////////////////////////////////////////////////////
int randRange(int min, int max);




//////////////////////////////////////////////////////////////////
/// \brief Use a look up table to calculate the sin faster
//////////////////////////////////////////////////////////////////
float mat_sin(float theta);

//////////////////////////////////////////////////////////////////
/// \brief Calculate the cosine based on the sine funcion minus 1/2 pi radians
//////////////////////////////////////////////////////////////////
float mat_cos(float theta);

//////////////////////////////////////////////////////////////////
/// \brief Calculate the tanget based on the sine and cosine functions
//////////////////////////////////////////////////////////////////
float mat_tan(float theta);