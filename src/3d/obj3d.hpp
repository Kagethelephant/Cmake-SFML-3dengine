#pragma once

//////////////////////////////////////////////////////////////////
// Headers
//////////////////////////////////////////////////////////////////
#include <SFML/Graphics.hpp>
#include <string>
#include "utils/matrix.hpp"
#include "camera.hpp"
#include "polygon.hpp"


// !!!!! USE RESERVE FUNCTIONS TO PREVENT VECTOR GROWTH !!!!!!!
// !!!!! if you are going to pop values pop them from tail to prevent shifting data in vector

//////////////////////////////////////////////////////////////////
/// \brief 3D object with storing triangle mesh and the means to render it
//////////////////////////////////////////////////////////////////
class object3d {

public:

   object3d();

   //////////////////////////////////////////////////////////////////
   /// \brief Object position and orientation variables
   //////////////////////////////////////////////////////////////////
   float u,v,w,x,y,z;

   //////////////////////////////////////////////////////////////////
   /// \brief Holds trianles or points for 3D mesh or point cloud
   //////////////////////////////////////////////////////////////////
   std::vector<tri3d> mesh;

   //////////////////////////////////////////////////////////////////
   /// \brief Update the rotation matrix of the object
   //////////////////////////////////////////////////////////////////
   void update();

   //////////////////////////////////////////////////////////////////
   /// \brief Called externally to draw the triangles in the mesh 
   //////////////////////////////////////////////////////////////////
   void draw(sf:: RenderTexture& texture, sf::Vector2i res, camera c,sf::Color col = sf::Color::Green);

   //////////////////////////////////////////////////////////////////
   /// \brief Load an OBJ file
   //////////////////////////////////////////////////////////////////
   void load(std::string fileName);


private:

   // Member variables: Matrices for rotating and projecting vertices/triangles
   mat4x4 m_matProj;
   mat4x4 m_matTransform;
   float m_aspectRatio;     

   /// Build the look at matrix
   mat4x4 mat_lookat(vec3& pos, vec3& target, vec3& up);

   /// Build view matrix
   mat4x4 mat_veiw(vec3& pos, vec3& target, vec3& up);

};

